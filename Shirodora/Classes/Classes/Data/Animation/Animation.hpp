//
//  Animation.hpp
//  BarrageGame
//
//  Created by Ryoutarou Onimura on 2016/06/29.
//
//

#ifndef Animation_hpp
#define Animation_hpp

#include <stdio.h>

//=========================================================================
// 追加のインクルードはここから
//=========================================================================

//=========================================================================
// チップデータクラス
// 画像の１部分の位置とサイズのデータ
//=========================================================================
typedef cocos2d::Rect CChip ;

//=========================================================================
//
// Animation
//
//=========================================================================
class CAnimation {
public :
    //=========================================================================
    // コンストラクタ/デストラクタ
    //=========================================================================
    /**
     *  @desc   constructor
     */
    CAnimation(int interval, int number, bool isLoop = false) ;
    
    /**
     *  @desc   destructor
     */
    virtual ~CAnimation() ;
    
    //=========================================================================
    // get
    //=========================================================================
    /**
     *  @desc   getCurrentFrame
     */
    int getCurrentFrame() ;
    
    /**
     *  @desc   isEnd
     */
    bool isEnd() ;
    
    //=========================================================================
    // メンバ関数
    //=========================================================================
    /**
     *  @desc   clear
     */
    void clear() ;
    
    /**
     *  @desc   アニメーションの更新処理
     *  @return 表示するフレーム数(-1...初期化がまだ行われていない)
     */
    virtual int update() ;
    
    /**
     *  @desc   チップデータの追加
     *  @param  チップデータ
     */
    virtual void addChipData(CChip*) = 0 ;
    
    /**
     *  @desc   現在フレームのチップを取得する
     *  @return 現在フレームのチップ
     */
    virtual CChip getCurrentChip() = 0 ;
    
    /**
     *  @desc   コピー生成
     *  @param  チップ原点座標移動ベクトル
     *  @return CAnimaation*
     *  @tips   チップの原点位置に変更があれば引数へ
     */
    virtual CAnimation *copy(const cocos2d::Vec2 &moveVec = cocos2d::Vec2::ZERO) = 0 ;
    
protected :
    //=========================================================================
    // メンバ変数
    //=========================================================================
    // カウンター
    int m_counter = 0 ;
    // 切り替え間隔
    int m_interval = 0 ;
    // アニメーション枚数
    int m_number = 0 ;
    // 現在のフレーム数
    int m_currentFrame = 0 ;
    // ループするかどうかのフラグ
    // true...ループする
    bool m_isLoop = false ;
    // アニメーションが終了したかどうかのフラグ
    bool m_isEnd = false ;
};

//=========================================================================
//
// ChipAnimation
//
//=========================================================================
class CChipAnimation : public CAnimation {
public :
    //=========================================================================
    // コンストラクタ/デストラクタ
    //=========================================================================
    /**
     *  @desc   constructor
     */
    CChipAnimation(int interval, int number, bool isLoop = false) ;
    
    /**
     *  @desc   destructor
     */
    ~CChipAnimation() ;
    
    //=========================================================================
    // メンバ関数
    //=========================================================================
    /**
     *  @desc   チップデータの追加
     *  @param  チップデータの
     */
    void addChipData(CChip* pChip) override ;
    
    /**
     *  @desc   現在のフレームのチップを取得
     */
    virtual CChip getCurrentChip() override ;
    
    /**
     *  @desc   コピー生成
     *  @param  チップ原点座標移動ベクトル
     *  @return CAnimaation*
     *  @tips   チップの原点位置に変更があれば引数へ
     */
    virtual CChipAnimation *copy(const cocos2d::Vec2 &moveVec = cocos2d::Vec2::ZERO) override ;
    
protected :
    //=========================================================================
    // メンバ変数
    //=========================================================================
    // 参照するチップデータ
    CChip* m_pChip {NULL} ;
};

//=========================================================================
//
// ChipNotAnimation
//
//=========================================================================
class CChipNotAnimation : public CChipAnimation {
public :
    //=========================================================================
    // コンストラクタ/デストラクタ
    //=========================================================================
    /**
     *  @desc   constructor
     */
    CChipNotAnimation() ;
    
    /**
     *  @desc   destructor
     */
    ~CChipNotAnimation() ;
    
    //=========================================================================
    // メンバ関数
    //=========================================================================
    /**
     *  @desc   更新処理は行わず返す値は必ず1になる
     */
    int update() override ;
    
    /**
     *  @desc   現在フレームのチップを取得する
     *  @return 現在フレームのチップ
     */
    CChip getCurrentChip() override ;
    
    /**
     *  @desc   コピー生成
     *  @param  チップ原点座標移動ベクトル
     *  @return CAnimaation*
     *  @tips   チップの原点位置に変更があれば引数へ
     */
    virtual CChipNotAnimation *copy(const cocos2d::Vec2 &moveVec = cocos2d::Vec2::ZERO) override ;
    
} ;

//=========================================================================
//
// ChipListAnimation
//
//=========================================================================
class CChipListAnimation : public CAnimation {
public :
    //=========================================================================
    // コンストラクタ/デストラクタ
    //=========================================================================
    /**
     *  @desc   constructor
     */
    CChipListAnimation(int interval, bool isLoop = false) ;
    
    /**
     *  @desc   destructor
     */
    ~CChipListAnimation() ;
    
    //=========================================================================
    // メンバ関数
    //=========================================================================
    /**
     *  @desc   チップデータの追加
     *  @param  チップデータ
     */
    void addChipData(CChip* pChip) override ;
    
    /**
     *  @desc   現在のフレームのチップを取得
     *  @return 現在のフレームのチップ
     */
    virtual CChip getCurrentChip() override ;
    
    /**
     *  @desc   コピー生成
     *  @param  チップ原点座標移動ベクトル
     *  @return CAnimaation*
     *  @tips   チップの原点位置に変更があれば引数へ
     */
    virtual CChipListAnimation *copy(const cocos2d::Vec2 &moveVec = cocos2d::Vec2::ZERO) override ;
    
protected :
    //=========================================================================
    // メンバ変数
    //=========================================================================
    // アニメーションさせるチップデータのリスト
    std::vector<CChip*> m_chipList ;
};

#endif /* Animation_hpp */
